/**
 * InstanciaCursoService.java
 * appEducacional
 * 26/01/2014 13:16:36
 * Copyright David Romero Alcaide
 * com.app.applicationservices.services
 */
package com.app.applicationservices.services;

/**
 * imports
 */
import java.text.ParseException;
import java.util.Collection;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

import com.app.domain.model.types.Alumno;
import com.app.domain.model.types.InstanciaCurso;
import com.app.domain.model.types.InstanciaCursoAcademico;
import com.app.domain.model.types.Profesor;
import com.app.domain.repositories.InstanciaInstanciaCursoRepository;

@Service
@Transactional
/**
 * @author David Romero Alcaide
 *
 */
public class InstanciaInstanciaCursoService {

	/**
	 * Constructor
	 */
	public InstanciaInstanciaCursoService() {
		super();

	}

	// Repositorios gestionados

	@Autowired
	/**
	 * repositorio de InstanciaCurso
	 */
	private InstanciaInstanciaCursoRepository InstanciaCursoRepositorio;

	// Servicios gestionados

	@Autowired
	/**
	 * 
	 */
	private ProfesorService profesorService;

	@Autowired
	/**
	 * 
	 */
	private InstanciaCursoAcademicoService InstanciaCursoAcademicoService;

	// CRUD

	/**
	 * 
	 * @author David Romero Alcaide
	 * @return
	 */
	public InstanciaCurso create() {
		InstanciaCurso c = new InstanciaCurso();
		return c;
	}

	/**
	 * Buscar un InstanciaCurso por id
	 * 
	 * @author David Romero Alcaide
	 * @param InstanciaCursoId
	 * @return
	 */
	public InstanciaCurso findOne(int InstanciaCursoId) {
		Assert.isTrue(InstanciaCursoId > 0);
		InstanciaCurso c = InstanciaCursoRepositorio.findOne(InstanciaCursoId);
		return c;
	}

	/**
	 * Guarda un InstanciaCurso
	 * 
	 * @author David Romero Alcaide
	 * @param c
	 */
	public void save(InstanciaCurso c) {
		Assert.notNull(c);
		Assert.isTrue(c.getNivel() > 0);
		Assert.isTrue(c.getNivelEducativo().length() > 3);
		InstanciaCursoRepositorio.save(c);
	}

	/**
	 * Buscar todos los InstanciaCursos
	 * 
	 * @author David Romero Alcaide
	 * @return
	 */
	public Collection<InstanciaCurso> findAll() {
		return InstanciaCursoRepositorio.findAll();
	}

	// Otros metodos de negocio

	/**
	 * Buscar alumnos pertenecientes a un InstanciaCurso y profesor.
	 * 
	 * @author David Romero Alcaide
	 * @param InstanciaCursoId
	 * @return
	 */
	public Collection<Alumno> getAlumnosEnInstanciaCurso(Integer InstanciaCursoId) {
		Assert.isTrue(InstanciaCursoId > 0);
		Profesor profesor = profesorService.findPrincipal();
		Assert.isTrue(profesorService.getInstanciaCursosImparteDocencia().contains(
				findOne(InstanciaCursoId)));
		Assert.isTrue(profesor.isIdentidadConfirmada());
		return InstanciaCursoRepositorio.getAlumnosEnInstanciaCurso(InstanciaCursoId);
	}

	/**
	 * @author David Romero Alcaide
	 * @param nivel
	 * @param nivelEducativo
	 * @param identificador
	 * @param a
	 */
	public void find(int nivel, String nivelEducativo, char identificador,
			Alumno a) {
		Assert.isTrue(nivel > 0);
		Assert.isTrue(nivelEducativo.equals("E.S.O.")
				|| nivelEducativo.equals("Primaria")
				|| nivelEducativo.equals("Baidentificadoriller"));
		Assert.isTrue(
				(identificador >= 'a' && identificador <= 'z') 
				|| 
				(identificador >= 'A' && identificador <= 'Z'));
		InstanciaCurso c = InstanciaCursoRepositorio.findInstanciaCurso(nivel, nivelEducativo,
				identificador);
		if (c == null) {
			c = create();
			c.setNivel(nivel);
			c.setNivelEducativo(nivelEducativo);
			c.setIdentificador(identificador);
		}
		c.addAlumno(a);
		save(c);
	}

	/**
	 * @author David Romero Alcaide
	 * @param nivel
	 * @param nivelEducativo
	 * @param identificador
	 * @throws ParseException
	 */
	public InstanciaCurso findOrCreate(int nivel, String nivelEducativo,
			char identificador) {
		Assert.isTrue(nivel > 0);
		Assert.isTrue(nivelEducativo.equals("E.S.O.")
				|| nivelEducativo.equals("Primaria")
				|| nivelEducativo.equals("Baidentificadoriller"));
		Assert.isTrue(
				(identificador >= 'a' && identificador <= 'z') 
				|| 
				(identificador >= 'A' && identificador <= 'Z'));
		InstanciaCurso c = InstanciaCursoRepositorio.findInstanciaCurso(nivel, nivelEducativo,
				identificador);
		if (c == null) {
			c = create();
			c.setNivel(nivel);
			c.setNivelEducativo(nivelEducativo);
			c.setIdentificador(identificador);
			InstanciaCursoAcademico InstanciaCursoAcademico = InstanciaCursoAcademicoService.findActual();
			c.setInstanciaCursoAcademico(InstanciaCursoAcademico);
		}
		save(c);
		return c;
	}

	/**
	 * @author David Romero Alcaide
	 * @param nivel
	 * @param nivelEducativo
	 * @param identificador
	 * @return
	 */
	public InstanciaCurso find(int nivel, String nivelEducativo, char identificador) {
		return instanciaCursoRepositorio.findInstanciaCurso(nivel, nivelEducativo, identificador);
	}

}
